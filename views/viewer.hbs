<script src="/scripts/three.min.js"></script>
<script src="/scripts/STLLoader.js"></script>
<script src="/scripts/Detector.js"></script>
<script src="/scripts/OrbitControls.js"></script>

<script>
if (!Detector.webgl) Detector.addGetWebGLMessage();
var container;
var camera, controls, cameraTarget, scene, renderer, point_light;

$(() => {
    init();
    animate();
});

function init() {
    container = $('#container').get(0);

    camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 15000);
    camera.position.set(50, 50, 50);
    cameraTarget = new THREE.Vector3(0, 0, 0);
    controls = new THREE.OrbitControls(camera, document);
    controls.addEventListener('change', render);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.enableZoom = false;
    scene = new THREE.Scene();

    var loader = new THREE.STLLoader();

    point_light = new THREE.PointLight( 0xffffff, 0.5, 0 );

    onProgress = (event) => {
        console.log(event.loaded + "/" + event.total);
        $('#percent').text(Math.floor(event.loaded / event.total * 100.0) + "%");
    };

    loader.load('{{model_url}}', (geometry) => {
        $('body').addClass('loaded');

        var material = new THREE.MeshPhongMaterial({
            color: 0xffffff,
            specular: 0x111111,
            shininess: 0,
            wireframe: false,
            polygonOffset: true,
            polygonOffsetFactor: 1,
            polygonOffsetUnits: 1,
            transparent: true,
            opacity: 0.9
        });
        var mesh = new THREE.Mesh(geometry, material);
        //mesh.rotation.set( 0, - Math.PI / 2, 0 );
        mesh.castShadow = true;
        mesh.receiveShadow = true;
        scene.add(mesh);
        console.log("a");
        var edges = new THREE.EdgesGeometry(geometry, 19);
        var line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({
            color: 0x111111
        }));
        scene.add(line);

        geometry.computeBoundingBox();

        var x = geometry.boundingBox.max.x * 1.75;
        var y = geometry.boundingBox.max.y * 1.75;
        var z = geometry.boundingBox.max.z * 1.75;

        x = Math.max(x, y, z);
        y = x;
        z = x;

        camera.position.set(x, y, z);
        point_light.position.set(0, 20, 0);

        var c = geometry.boundingBox.min.clone();
        c.add(geometry.boundingBox.max);
        c.divideScalar(2);
        cameraTarget = c;

    }, onProgress);


    // Lights
    scene.add(new THREE.HemisphereLight(0xaaaaaa, 0x555555));
    camera.add( point_light );
    scene.add(camera);

    renderer = new THREE.WebGLRenderer({
        antialias: true
    });
    renderer.setClearColor(0xffffff);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.gammaInput = true;
    renderer.gammaOutput = true;
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.cullFace = THREE.CullFaceBack;
    container.appendChild(renderer.domElement);
    //
    window.addEventListener('resize', onWindowResize, false);
}

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

function animate() {
    requestAnimationFrame(animate);
    controls.update();
    render();
}

function render() {
    camera.lookAt(cameraTarget);
    renderer.render(scene, camera);
}
</script>

<div id="container"></div>
<div id="percent"></div>
