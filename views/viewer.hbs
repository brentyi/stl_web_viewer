<script src="/scripts/three.min.js"></script>
<script src="/scripts/STLLoader.js"></script>
<script src="/scripts/Detector.js"></script>
<script src="/scripts/OrbitControls.js"></script>

<script>
if (!Detector.webgl) Detector.addGetWebGLMessage();
var container;
var camera, controls, cameraTarget, scene, renderer;
init();
animate();

function init() {
    container = document.createElement('div');
    document.body.appendChild(container);
    camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 15000);
    camera.position.set(0, 0.25, 7);
    cameraTarget = new THREE.Vector3(0, 10000, 0);
    controls = new THREE.OrbitControls(camera, document, cameraTarget);
    controls.addEventListener('change', render);
    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0xffffff, 999, 999);

    var loader = new THREE.STLLoader();

    var point_light = new THREE.PointLight( 0xffffff, 10, 0 );

    onProgress = (event) => {
        console.log(event.loaded / event.total);
    };

    loader.load('{{model_url}}', (geometry) => {
            var material = new THREE.MeshPhongMaterial({
                color: 0xffffff,
                specular: 0x111111,
                shininess: 0,
                wireframe: false,
                polygonOffset: true,
                polygonOffsetFactor: 1,
                polygonOffsetUnits: 1,
                transparent: true,
                opacity: 0.8
            });
            var mesh = new THREE.Mesh(geometry, material);
            //mesh.rotation.set( 0, - Math.PI / 2, 0 );
            mesh.castShadow = true;
            mesh.receiveShadow = true;
            scene.add(mesh);
            console.log("a");
            var edges = new THREE.EdgesGeometry(geometry, 29);
            var line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({
                color: 0x111111
            }));
            scene.add(line);

            geometry.computeBoundingBox();

            var x = geometry.boundingBox.max.x * 2.5;
            var y = geometry.boundingBox.max.y * 2.5;
            var z = geometry.boundingBox.max.z * 2.5;
            camera.position.set(x, y, z);
            point_light.position.set(x, y, z);

            var c = geometry.boundingBox.min.clone();
            c.add(geometry.boundingBox.max);
            c.divideScalar(2);
            camera.lookAt(c);
            cameraTarget = c;
    }, onProgress);


    // Lights
    scene.add(new THREE.HemisphereLight(0xffffff, 0x333333));
    scene.add( point_light );

    renderer = new THREE.WebGLRenderer({
        antialias: true
    });
    renderer.setClearColor(scene.fog.color);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.gammaInput = true;
    renderer.gammaOutput = true;
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.cullFace = THREE.CullFaceBack;
    container.appendChild(renderer.domElement);
    //
    window.addEventListener('resize', onWindowResize, false);
}

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

function animate() {
    requestAnimationFrame(animate);
    controls.update();
    render();
}

function render() {
    camera.lookAt(cameraTarget);
    renderer.render(scene, camera);
}
</script>
